openapi: 3.0.3
info:
  title: Engate API
  version: 3.0.0
  description: |

servers:
  - url: 'http://localhost/dutch/dict/api/v1.0/search.php'
    description: ローカル環境
    variables:
      host:
        default: localhost
      port:
        default: '80'
      version:
        default: development

#-----------------------------------------------------------------
# paths
#
# 【規約】
# 1. スキーマをここで直接定義しない
# 2. exampleをここに書かない
#
# 【Sample】
#   '/sample':
#     post:
#       tags:
#         - sample
#       summary: サンプル
#       parameters:
#         - $ref: '#/components/parameters/pm_xxxx'
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               allOf:
#                 - $ref: '#/components/schemas/sc_aaa'
#                 - $ref: '#/components/schemas/sc_bbb'
#       responses:
#         200:
#           description: APIの返り値
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/sc_status'
#-----------------------------------------------------------------
paths:
  '/search':
    get:
      summary: 検索
      security:
        - apiKey: []
          bearer: []
      parameters:
        - $ref: '#/components/parameters/pm_token'
        - $ref: '#/components/parameters/pm_word'

      responses:
        '200':
          description: APIの返り値
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/sc_status'
                  - $ref: '#/components/schemas/sc_userPoint'

        '403':
          $ref: '#/components/responses/403'

  '/register':
    post:
      summary: 登録
      security:
        - apiKey: []
          bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/sc_gmopgToken'
      responses:
        '200':
          description: APIの返り値
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/sc_status'
                  - $ref: '#/components/schemas/sc_creditcard'
        '403':
          $ref: '#/components/responses/403'


#-----------------------------------------------------------------
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
      description: APIキー。環境毎に異なる。
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: ログイン認証。ログイン後は常に必ず付与する。

#-----------------------------------------------------------------
# parameters
#
# 【規約】
# 1. スキーマ名は pm_ で始める
# 2. exampleではrefを使わない(表示が狂うので)
#
# 【sample】
#  <OK> 
#     example: 'abcdefghijklmnopqrstuvwxyz'
#  <NG> 
#     example:
#       $ref: '#/components/examples/ex_text/value'
#-----------------------------------------------------------------
  parameters:
    pm_word:
      name: confirmation-token
      in: header
      description: Confirmation Token
      required: true
      schema:
        type: string
        example: 'abcdefghijklmnopqrstuvwxyz'



#-----------------------------------------------------------------
  responses:
    '401':
      description: Bearerの認証に失敗したときのレスポンス
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sc_status'
    '403':
      description: API-KEYや認証トークンの認証に失敗したときのレスポンス
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sc_status'

#-----------------------------------------------------------------
  schemas:
    #-----------------------------------------------------------------
    # 【中間層のスキーマ】
    #   中間層というのは、他のスキーマの参照のみを行う層を指す
    #
    # 【規約】
    # 1. スキーマ名は scm_ で始める
    # 2. exampleはここには書かない
    #
    # 【Sample】
    # <良い例(オブジェクト)>
    # sc_xxxYYY:
    #   properties:
    #     xxx_yyy:
    #       allOf:
    #         - $ref: '#/components/schemas/sc_aaaa'
    #         - $ref: '#/components/schemas/sc_bbbb'
    #
    #   これはSwaggerUIの表示では以下のようになる
    #   "xxx_yyy": {
    #      "aaaa": ... ,
    #      "bbbb": ... 
    #   }
    #
    # <良い例(配列)>
    # sc_xxxYYY:
    #   properties:
    #     xxx_yyy:
    #       items:
    #         allOf:
    #           - $ref: '#/components/schemas/sc_aaaa'
    #           - $ref: '#/components/schemas/sc_bbbb'
    #
    #   これはSwaggerUIの表示では以下のようになる
    #   "xxx_yyy": [
    #     {
    #       "aaaa": ... ,
    #       "bbbb": ... 
    #     }
    #   ]
    #
    # <悪い例>
    # sc_xxx_yyy:  <--- (1)
    #   properties:
    #     aaa:  <--- (2)
    #       type: string
    #       example:
    #         $ref: '#/components/examples/ex_aaa/value'
    #   allOf:
    #      - $ref: '#/components/schemas/sc_bbb/properties/bbb' <--- (3)
    #
    # (1) lower camel caseにする(sc_xxx_yyy -> sc_xxxYYY)
    # (2) スキーマ'aaa:'は最下層に記述し、ここには書かない
    # (3) '/properties/bbb'の部分は不要
    #-----------------------------------------------------------------
    scm_status:
      allOf:
        - $ref: '#/components/schemas/sc_status'
        - $ref: '#/components/schemas/sc_word'

    scm_word:
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/sc_userPoint'
            - $ref: '#/components/schemas/sc_ID'
            - $ref: '#/components/schemas/sc_customerID'
            - $ref: '#/components/schemas/sc_name'
            - $ref: '#/components/schemas/sc_avatar'
            - $ref: '#/components/schemas/sc_lastFollowedID'
            - $ref: '#/components/schemas/sc_urlFlg'

    sc_result:
      properties:
        apple_pay:
          allOf:
            - $ref: '#/components/schemas/sc_epochTimestamp'
            - $ref: '#/components/schemas/sc_expiresAt'
            - $ref: '#/components/schemas/sc_merchantSessionIdentifier'
            - $ref: '#/components/schemas/sc_nonce'
            - $ref: '#/components/schemas/sc_merchantIdentifier'
            - $ref: '#/components/schemas/sc_domainName'
            - $ref: '#/components/schemas/sc_displayName'
            - $ref: '#/components/schemas/sc_signature'
            - $ref: '#/components/schemas/sc_operationalAnalyticsIdentifier'
            - $ref: '#/components/schemas/sc_retries'
            - $ref: '#/components/schemas/sc_pspID'
            - $ref: '#/components/schemas/sc_engatePoints'
            - $ref: '#/components/schemas/sc_sumLimitedPoints'
            - $ref: '#/components/schemas/sc_sumTargetPoints'
            - $ref: '#/components/schemas/sc_limitedPoints'
            - $ref: '#/components/schemas/sc_targetPoints'



    #-----------------------------------------------------------------
    # 【最下層のスキーマ】
    #   最下層というのは、単独のオブジェクトを指す
    #
    # 【規約】
    # 1. スキーマ名は scl_ で始める
    # 2. exampleはここに書く
    #
    # 【Sample】
    # <良い例(オブジェクト)>
    # sc_xxxYyy:
    #   properties:
    #     xxx_yyy:
    #       type: integer
    #       example:
    #         $ref: '#/components/examples/ex_integer/value'
    #
    # <良い例(配列)>
    # sc_xxxYyy:
    #   properties:
    #     xxx_yyy:
    #       items:
    #         type: integer
    #       example: 
    #         - 1000
    #         - 1001
    #-----------------------------------------------------------------
    scl_type:
      properties:
        type:
          type: string
          description: 品詞
          example:
            $ref: '#/components/examples/ex_type/value'
    scl_mean:
      properties:
        mean:
          type: string
          description: 意味
          example:
            $ref: '#/components/examples/ex_mean/value'
    scl_word:
      properties:
        word:
          type: string
          description: 単語
          example:
            $ref: '#/components/examples/ex_word/value'


#-----------------------------------------------------------------
  examples:
    ex_type:
      summary: 品詞
      value: 動
    ex_mean:
      summary: 意味
      value: 世界
    ex_word:
      summary: 単語
      value: aarde
    ex_token:
      summary: トークン
      value: abcdefghijklmnopqrstuvwxyz
